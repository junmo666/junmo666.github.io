<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JunMo的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://junmo666.github.io/"/>
  <updated>2018-10-27T13:36:05.777Z</updated>
  <id>https://junmo666.github.io/</id>
  
  <author>
    <name>JunMo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nmap进阶使用</title>
    <link href="https://junmo666.github.io/2018/10/27/nmap%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://junmo666.github.io/2018/10/27/nmap进阶使用/</id>
    <published>2018-10-27T11:19:50.000Z</published>
    <updated>2018-10-27T13:36:05.777Z</updated>
    
    <content type="html"><![CDATA[<p>本章介绍的是端口扫描工具nmap,我们已经在第一章学会了安装现在来教大家其他的进阶用法。</p><p><img src="https://t1.picb.cc/uploads/2018/10/26/JbI86d.jpg" alt="nmap"></p><a id="more"></a><h3 id="1、指定目标"><a href="#1、指定目标" class="headerlink" title="1、指定目标"></a>1、指定目标</h3><p><strong>1.</strong> 192.168.1.0/24 扫描整个网段 0./24 代表0-255</p><p><strong>2.</strong> 指定范围 192.168.1.1-255 192.168.1-255.1（任意位置） </p><blockquote><p>  <label style="color:blue">nmap -iL 文件名 </label> (扫描文件里面的ip,要注意参数大小写哦！)</p></blockquote><p>主机名或者ip地址列表<br>列表中的项可以是Nmap在 命令行上接受的任何格式(IP地址，主机名，CIDR，IPv6，或者八位字节范围)。 每一项必须以一个或多个空格，制表符或换行符分开。 如果您希望Nmap从标准输入而不是实际文件读取列表， 您可以用一个连字符(-)作为文件名。</p><blockquote><p><label style="color:blue">nmap -iR 数量 </label>(该参数可以用来选择随机Internet主机进行扫描。 NMAP会随机生成目标的指定数量，并试图对其进行扫描)</p><p> <label style="color:blue">nmap -excludefile 文件名</label>（不扫描文件里面包含的ip）</p></blockquote><h3 id="2、主机发现"><a href="#2、主机发现" class="headerlink" title="2、主机发现"></a>2、主机发现</h3><blockquote><p><label style="color:blue">nmap -sL</label>（列出给出目标的具体内容，默认会对地址进行反向解析，显示主机名。）</p><p><label style="color:blue">nmap -sn</label>（不进行端口扫描）</p></blockquote><p>在以前的Nmap中，-sn被称为-sP。-sP（Ping扫描）</p><blockquote><p><label style="color:blue">nmap -Pn</label>（无ping扫描,跳过主机发现阶段，把每个都IP当成存活主机。）</p><p><label style="color:blue"> nmap -P0 协议号列表</label> （IP 协议 ping）</p></blockquote><p>一个较新的主机发现选项是IP协议ping，它将IP数据包发送到IP报头中指定的协议号。协议列表的格式与前面讨论的TCP、UDP和SCTP主机发现选项的端口列表相同。如果没有指定协议，默认的是为ICMP(协议1)、IGMP(协议2)和ipin-IP(协议4)发送多个IP数据包。默认的协议可以在编译时通过更改nmap.h中的默认proat探测端口规范来配置。注意，对于ICMP、IGMP、TCP(协议6)、UDP(协议17)和SCTP(协议132)，数据包是用适当的协议标头发送的，而其他协议被发送时，除了IP报头之外没有附加的数据(除非有任何数据——数据字符串，或者——数据长度选项被指定)。</p><blockquote><p><label style="color:blue"> nmap -PS 端口列表</label> （TCP SYN Ping）</p></blockquote><p><strong>1.</strong>该选项发送一个设置了SYN标志位的空TCP报文，默认端口为80。不同的端口可以作为选项制定（如 -PS22，23，25，80，113，1050，3500）<br><strong>2.</strong>SYN标志位告诉对方您正试图建立一个连接。 通常目标端口是关闭的，一个RST (复位) 包会发回来。 如果碰巧端口是开放的，目标会进行TCP三步握手的第二步，回应 一个SYN/ACK TCP报文。<br><strong>3.</strong>无论RST还是SYN/ACK响应都告诉Nmap该主机正在运行。然后运行Nmap的机器则会扼杀这个正在建立的连接， 发送一个RST而非ACK报文，ST报文是运行Nmap的机器而不是Nmap本身响应的，因为它对收到 的SYN/ACK感到很意外。</p><blockquote><p><label style="color:blue">nmap -PA端口列表</label> （TCP ACK Ping）</p></blockquote><p><strong>1.</strong>ACK报文表示确认一个建立连接的尝试，但该连接尚未完全建立。 所以远程主机应该总是回应一个RST报文， 因为它们并没有发出过连接请求到运行Nmap的机器，如果它们正在运行的话。<br><strong>2.</strong>如果非特权用户尝试该功能， 或者指定的是IPv6目标，前面说过的connect()方法将被使用。 这个方法并不完美，因为它实际上发送的是SYN报文，而不是ACK报文。<br><strong>3.</strong>他的默认端口和修改方法跟-PS一致<br><strong>4.</strong>SYN探测更有可能用于这样的系统，由于没头没脑的ACK报文 通常会被识别成伪造的而丢弃。解决这个两难的方法是通过即指定 -PS又指定-PA来即发送SYN又发送ACK。</p><blockquote><p><label style="color:blue"> nmap -PU 端口列表</label> （UDP Ping）</p></blockquote><p><strong>1.</strong>发送一个空的(除非指定了–data-length UDP报文到给定的端口。端口列表的格式和前面讨论过的-PS和-PA选项还是一样。 如果不指定端口，默认是31338。修改方法和-PA -PS一致<br><strong>2.</strong>如果目标机器的端口是关闭的，UDP探测应该马上得到一个ICMP端口无法到达的回应报文。 这对于Nmap意味着该机器正在运行。 许多其它类型的ICMP错误，像主机/网络无法到达或者TTL超时则表示down掉的或者不可到达的主机。 没有回应也被这样解释。如果到达一个开放的端口，大部分服务仅仅忽略这个 空报文而不做任何回应。这就是为什么默认探测端口是31338这样一个 极不可能被使用的端口。少数服务如chargen会响应一个空的UDP报文， 从而向Nmap表明该机器正在运行。</p><blockquote><p><label style="color:blue">nmap -PR </label> （ARP Ping）</p></blockquote><p>如果Nmap发现目标主机就在它所在的局域网上，它会进行ARP扫描。 即使指定了不同的ping类型(如 -PI或者 -PS) ，Nmap也会对任何相同局域网上的目标机使用ARP。 如果您真的不想要ARP扫描，指定 –send-ip。<br>对于IPv6(-6选项)，-PR使用ICMPv6的邻居发现而不是ARP。在RFC 4861中定义的邻居发现可以看作是IPv6等效的。</p><h3 id="3、端口状态"><a href="#3、端口状态" class="headerlink" title="3、端口状态"></a>3、端口状态</h3><blockquote><p>open(开放的)</p></blockquote><p>应用程序正在该端口接收TCP 连接或者UDP报文。</p><blockquote><p>closed(关闭的)</p></blockquote><p>关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。</p><blockquote><p>filtered(被过滤的)</p></blockquote><p>由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。</p><blockquote><p>unfiltered(未被过滤的)</p></blockquote><p>未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。</p><blockquote><p>open|filtered(开放或者被过滤的)</p></blockquote><p>当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。<br>开放的端口不响应就是一个例子。</p><blockquote><p>closed|filtered(关闭或者被过滤的)</p></blockquote><p>该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中</p><h3 id="四、端口扫描技术"><a href="#四、端口扫描技术" class="headerlink" title="四、端口扫描技术"></a>四、端口扫描技术</h3><blockquote><p><label style="color:blue">nmap -sS</label> （TCP SYN扫描 半开放扫描）</p></blockquote><p>半开放扫描，不打开一个完整的TCP链接<br>它发送一个SYN报文，然后等待响应。 SYN/ACK表示端口在监听 (开放)，而 RST (复位)表示没有监听者。如果数次重发后仍没响应， 该端口就被标记为被过滤。如果收到ICMP不可到达错误 (类型3，代码1，2，3，9，10，或者13)，该端口也被标记为被过滤。</p><blockquote><p><label style="color:blue">nmap -sT </label> （TCP connect()扫描）</p></blockquote><p>Nmap通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，而不像其它扫描类型直接发送原始报文。 这是和Web浏览器，P2P客户端以及大多数其它网络应用程序用以建立连接一样的 高层系统调用。当Nmap连接，然后不发送数据又关闭连接， 许多普通UNIX系统上的服务会在syslog留下记录，有时候是一条加密的错误消息。</p><blockquote><p><label style="color:blue">nmap -sU</label> （UDP 扫描）</p></blockquote><p><strong>1.</strong>UDP扫描用-sU选项激活。它可以和TCP扫描如 SYN扫描 (-sS)结合使用来同时检查两种协议。<br><strong>2.</strong>UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是closed(关闭的)。 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是filtered(被过滤的)。 偶尔地，某服务会响应一个UDP报文，证明该端口是open(开放的)。 如果几次重试后还没有响应，该端口就被认为是 open|filtered(开放|被过滤的)。 这意味着该端口可能是开放的，也可能包过滤器正在封锁通信。 可以用版本扫描(-sV)帮助区分真正的开放端口和被过滤的端口。</p><blockquote><p><label style="color:blue">nmap -sY</label> （SCTP INIT 扫描）</p></blockquote><p>SCTP INIT扫描类似TCP SYN扫描，他也是打开一个半开的连接，而不是建立一个完整的SCTP关联。如果目标端口回复一个INIT-ACK数据包，则说明端口是开放的，如果回复一个ABORT数据包，端口是关闭的，如果没有回复，端口会被标记标记为被过滤，当然如果收到了ICMP不可达的消息（type 3, code 0, 1, 2, 3, 9, 10, or 13）也会被标记为被过滤。</p><blockquote><p><label style="color:blue">-sN; -sF; -sX </label> (TCP Null，FIN，Xmas扫描)</p></blockquote><p><strong>1.</strong>如果扫描系统遵循该RFC，当端口关闭时，任何不包含SYN，RST，或者ACK位的报文会导致 一个RST返回，而当端口开放时，应该没有任何响应。只要不包含SYN，RST，或者ACK， 任何其它三种(FIN，PSH，and URG)的组合都行。Nmap有三种扫描类型利用这一点：<br>Null扫描 (-sN)</p><p>不设置任何标志位(tcp标志头是0)<br>FIN扫描 (-sF)</p><p>只设置TCP FIN标志位。<br>Xmas扫描 (-sX)</p><p>设置FIN，PSH，和URG标志位，就像点亮圣诞树上所有的灯一样。<br><strong>2.</strong>除了探测报文的标志位不同，这三种扫描在行为上完全一致。 如果收到一个RST报文，该端口被认为是 closed(关闭的)，而没有响应则意味着 端口是open|filtered(开放或者被过滤的)。 如果收到ICMP不可到达错误(类型 3，代号 1，2，3，9，10，或者13)，该端口就被标记为 被过滤的。</p><blockquote><p><label style="color:blue">nmap -sA </label> (TCP ACK扫描)</p></blockquote><p><strong>1.</strong>这种扫描与目前为止讨论的其它扫描的不同之处在于 它不能确定open(开放的)或者 open|filtered(开放或者过滤的))端口。 它用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。<br><strong>2.</strong>ACK扫描探测报文只设置ACK标志位(除非您使用 –scanflags)。当扫描未被过滤的系统时， open(开放的)和closed(关闭的) 端口 都会返回RST报文。Nmap把它们标记为 unfiltered(未被过滤的)，意思是 ACK报文不能到达，但至于它们是open(开放的)或者 closed(关闭的) 无法确定。不响应的端口 或者发送特定的ICMP错误消息(类型3，代号1，2，3，9，10， 或者13)的端口，标记为 filtered(被过滤的)。</p><blockquote><p><label style="color:blue">nmap -sW</label> （TCP滑动窗口扫描）</p></blockquote><p>在某些系统上，开放端口用正数表示窗口大小(甚至对于RST报文) 而关闭端口的窗口大小为0。因此，当收到RST时，窗口扫描不总是把端口标记为 unfiltered， 而是根据TCP窗口值是正数还是0，分别把端口标记为open或者 closed</p><blockquote><p><label style="color:blue">nmap -sM</label> （TCP Maimon扫描）</p></blockquote><p>探测报文是FIN/ACK。 根据RFC 793 (TCP)，无论端口开放或者关闭，都应该对这样的探测响应RST报文。 然而，Uriel注意到如果端口开放，许多基于BSD的系统只是丢弃该探测报文。</p><blockquote><label style="color:blue">nmap –scanflags </label></blockquote><p>–scanflags选项可以是一个数字标记值如9 (PSH和FIN)， 但使用字符名更容易些。 只要是URG， ACK，PSH， RST，SYN，and FIN的任何组合就行。例如，–scanflags URGACKPSHRSTSYNFIN设置了所有标志位，但是这对扫描没有太大用处。 标志位的顺序不重要。</p><blockquote><p><label style="color:blue">nmap -sZ</label> (SCTP COOKIE ECHO扫描)</p></blockquote><p>如果目标端口开放，则会丢弃之前没有发起关联请求的SCTP COOKIE ECHO数据包，如果端口是关闭的则会返回一个SCTP ABORT数据包。所以这个扫描技术，无法分辨过滤和开放，只能分辨出关闭的端口。</p><blockquote><p><label style="color:blue">nmap –sI 僵尸主机地址：端口</label>（idlescan）</p></blockquote><p><strong>1.</strong>这种高级的扫描方法允许对目标进行真正的TCP端口盲扫描 (意味着没有报文从您的真实IP地址发送到目标)。相反，side-channel攻击 利用zombie主机上已知的IP分段ID序列生成算法来窥探目标上开放端口的信息。<br><strong>2.</strong>如果您由于IPID改变希望探测zombie上的特定端口， 您可以在zombie 主机后加上一个冒号和端口号。 否则Nmap会使用默认端口(80)。</p><blockquote><p><label style="color:blue">nmap -sO</label>（IP协议扫描）</p></blockquote><p>IP 协议扫描可以让您确定目标机支持哪些IP协议 (TCP，ICMP，IGMP，等等)。从技术上说，这不是端口扫描 ，既然它遍历的是IP协议号而不是TCP或者UDP端口号。 但是它仍使用 -p选项选择要扫描的协议号， 用正常的端口表格式报告结果，甚至用和真正的端口扫描一样 的扫描引擎。因此它和端口扫描非常接近，也被放在这里讨论。</p><blockquote><p><label style="color:blue"> -b <ftp relay="" host="">（</ftp></label>（FTP弹跳扫描）</p></blockquote><p><strong>1.</strong>FTP协议的一个有趣特征(RFC 959) 是支持所谓代理ftp连接。<br><strong>2.</strong>它允许用户连接到一台FTP服务器，然后要求文件送到一台第三方服务器。 这个特性在很多层次上被滥用，所以许多服务器已经停止支持它了。其中一种就是导致FTP服务器对其它主机端口扫描。 只要请求FTP服务器轮流发送一个文件到目标主机上的所感兴趣的端口。 错误消息会描述端口是开放还是关闭的。<br><strong>3.</strong>这是绕过防火墙的好方法，因为FTP服务器常常被置于可以访问比Web主机更多其它内部主机的位置。<br><strong>4.</strong>Nmap用-b选项支持ftp弹跳扫描。参数格式是 <username>:<password>@<server>:<port>。 <server> 是某个脆弱的FTP服务器的名字或者IP地址。 您也许可以省略<username>:<password>， 如果服务器上开放了匿名用户(user:anonymous password:-wwwuser@)。 端口号(以及前面的冒号) 也可以省略，如果<server>使用默认的FTP端口(21)。</server></password></username></server></port></server></password></username></p><h3 id="五、端口扫描设置"><a href="#五、端口扫描设置" class="headerlink" title="五、端口扫描设置"></a>五、端口扫描设置</h3><p>默认情况下，Nmap用指定的协议对端口1到1024以及nmap-services 文件中列出的更高的端口在扫描。</p><blockquote><p><label style="color:blue"> nmap -p &lt;端口号，端口列表&gt; </label> （扫描指定端口）</p></blockquote><p>1.制定扫描某个或某些端口用逗号分隔，或者用链接符号表示范围也可。<br>2.对于-sO IP协议扫描，该选项用来指定协议号（0-255）。</p><blockquote><p><label style="color:blue">nmap –exclede-ports &lt;端口列表&gt; </label>（排除的端口）</p></blockquote><p>指定排除的端口，如果是指定排除的协议号的话，他的值在0-255之间</p><blockquote><p><label style="color:blue">nmap -F</label> （快速扫描）</p></blockquote><p>在nmap的nmap-services 文件中(对于-sO，是协议文件)指定您想要扫描的端口。 这比扫描所有65535个端口快得多。 因为该列表包含如此多的TCP端口(1200多)，这和默认的TCP扫描 scan (大约1600个端口)速度差别不是很大。如果用–datadir选项指定小的nmap-services文件 ，差别会很大。</p><blockquote><p><label style="color:blue">nmap -r</label>（顺序扫描端口）</p></blockquote><p>默认情况下，Nmap按随机顺序扫描端口 (除了出于效率的考虑，常用的端口前移)。可以指定-r来顺序端口扫描。</p><blockquote><label style="color:blue"> nmap –port-ratio <ratio></ratio></label></blockquote><p>扫描nmap-services中给出的目标的一定比例，这个值在1.0-0.0之间。</p><blockquote><label style="color:blue">nmap –top-ports</label></blockquote><p>扫描nmap-services中的前多少个端口</p><h3 id="六、服务和版本扫描"><a href="#六、服务和版本扫描" class="headerlink" title="六、服务和版本扫描"></a>六、服务和版本扫描</h3><blockquote><p><label style="color:blue">nmap -sV</label>（服务版本扫描）</p></blockquote><p>扫描服务版本，也可以用-A同时进行操作系统探测和版本扫描。</p><blockquote><p><label style="color:blue"> nmap –allports</label>（版本扫描时，不排除任何端口）</p></blockquote><p><strong>1.</strong>默认情况下，Nmap版本探测会跳过9100 TCP端口，因为一些打印机简单地打印送到该端口的 任何数据，这回导致数十页HTTP get请求，二进制 SSL会话请求等等被打印出来。<br><strong>2.</strong>这一行为可以通过修改或删除nmap-service-probes 中的Exclude指示符改变</p><blockquote><p><label style="color:blue">–version-intensity &lt;强度&gt;</label> （版本扫描强度）</p></blockquote><p>强度在1到9之间，一般来说，强度越大，服务越有可能被正确识别</p><h3 id="七、操作系统探测"><a href="#七、操作系统探测" class="headerlink" title="七、操作系统探测"></a>七、操作系统探测</h3><blockquote><p><label style="color:blue">nmap -O (</label> (启用操作系统检测)</p></blockquote><p>也可以使用-A来同时启用操作系统检测和版本扫描。</p><blockquote><label style="color:blue">nmap –osscan-limit</label></blockquote><p>只对至少知晓一个端口开放或者关闭的主机进行操作系统探测</p><blockquote><label style="color:blue">nmap –osscan-guess;–fuzzy</label></blockquote><p>无法确定操作系统类型的时候，默认进行推测。但是使用这两项，会让猜测更加准确。</p><blockquote><p><label style="color:blue">nmap –max-os-tries</label>（操作系统识别重试次数）</p></blockquote><p>默认重试五次，</p><h3 id="七、输出"><a href="#七、输出" class="headerlink" title="七、输出"></a>七、输出</h3><blockquote><p><label style="color:blue">nmap -oN <filespec> </filespec></label> (标准输出)</p></blockquote><p>将结果输入制定文件</p><blockquote><p><label style="color:blue">nmap -oX <filespec> </filespec></label> (XML输出)</p></blockquote><p>将XML输出写入指定文件</p><blockquote><p><label style="color:blue">-oS <filespec></filespec></label> (ScRipT KIdd|3 oUTpuT)</p></blockquote><p>脚本小子输出类似于交互工具输出，这是一个事后处理，适合于 ‘l33t HaXXorZ， 由于原来全都是大写的Nmap输出。</p><blockquote><p><label style="color:blue">-oG <filespec></filespec></label> (Grep输出)</p></blockquote><p>这种方式最后介绍，因为不建议使用。XML输格式很强大，便于有经验 的用户使用。XML是一种标准，由许多解析器构成，而Grep输届更简化。XML是可扩展的，以支持新发布的Nmap特点。使用Grep输出的目的是忽略这些 特点，因为没有足够的空间。<br>然而，Grep输出仍然很常使用。它是一种简单格式，每行一个主机，可以 通过UNIX工具(如grep、awk、cut、sed、diff)和Perl方便地查找和分解。常可 用于在命令行上进行一次性测式。查找ssh端口打开或运行Sloaris的主机，只需要一个简单的grep主机说明，使用通道并通过awk或cut命令打印所需的域。<br>Grep输出可以包含注释(每行由#号开始)。每行由6个标记的域组成，由制表符及 冒号分隔。这些域有主机，端口， 协议，忽略状态，操作系统，序列号， IPID和状态。<br>这些域中最重要的是Ports，它提供了所关注的端口的细节，端口项由逗号分隔。每个端口项代表一个所关注的端口，每个子域由/分隔。这些子域有：端口号， 状态，协议， 拥有者，服务， SunRPCinfo和版本信息。</p><blockquote><p><label style="color:blue">nmap -oA <basename> </basename></label> (输出至所有格式)</p></blockquote><p>为使用方便，利用-oA<basename>选项 可将扫描结果以标准格式、XML格式和Grep格式一次性输出。分别存放在 <basename>.nmap，<basename>.xml和 <basename>.gnmap文件中。也可以在文件名前 指定目录名，如在UNIX中，使用~/nmaplogs/foocorp/， 在Window中，使用c:\hacking\sco on Windows。</basename></basename></basename></basename></p><blockquote><p><label style="color:blue">-v</label> （提高输出信息的详细程度）&lt;</p><p><label style="color:blue">-d [level]</label>（设置调试级别）&lt;</p><p><label style="color:blue">–packet-trace</label>（跟踪发出的报文）&lt;</p><p><label style="color:blue">-iflist</label> （列举端口和路由）&lt;</p><p><label style="color:blue"> –append-out</label>（在输出文件住追加）&lt;</p><p><label style="color:blue">–resume <filename> </filename></label>（继续中断的扫描）</p></blockquote><p>如果标准扫描 (-oN)或Grep扫描(-oG)日志 被保留，用户可以要求Nmap恢复终止的扫描，只需要简单地使用选项 –resume并说明标准/Grep扫描输出文件，不允许 使用其它参数，Nmap会解析输出文件并使用原来的格式输出。使用方式 如nmap –resume <logfilename>。Nmap将把新地结果添加到文件中，这种方式不支持XML输出格式，原因是将两次运行结果合并至一个XML文件比较困难。</logfilename></p><blockquote><label style="color:blue">–open</label> </blockquote><p>只显示开放或者可能开放的端口</p><p>#本篇文章内容均来自网络，仅供学习使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章介绍的是端口扫描工具nmap,我们已经在第一章学会了安装现在来教大家其他的进阶用法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.picb.cc/uploads/2018/10/26/JbI86d.jpg&quot; alt=&quot;nmap&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透工具" scheme="https://junmo666.github.io/categories/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="nmap" scheme="https://junmo666.github.io/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>nmap的安装以及使用</title>
    <link href="https://junmo666.github.io/2018/10/26/nmap%E5%AE%89%E8%A3%85/"/>
    <id>https://junmo666.github.io/2018/10/26/nmap安装/</id>
    <published>2018-10-26T05:20:45.000Z</published>
    <updated>2018-10-27T13:36:05.787Z</updated>
    
    <content type="html"><![CDATA[<p>本章介绍的是端口扫描工具nmap,用来扫描网上电脑开放的网络连接端。具体功能是确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统。它是网络管理员必用的软件之一，以及用以评估网络系统安全。</p><p><img src="https://t1.picb.cc/uploads/2018/10/26/JbI86d.jpg" alt="nmap"></p><a id="more"></a><h3 id="1-安装nmap"><a href="#1-安装nmap" class="headerlink" title="1.安装nmap"></a>1.安装nmap</h3><p>nmap官网地址：<a href="https://nmap.org/" target="_blank" rel="external">https://nmap.org/</a>  </p><p>Linux:在Linux终端上运行如下命令：apt-get install nmap</p><p><img src="https://i.loli.net/2018/10/26/5bd319c20d9e2.png" alt="下载图片"></p><p><a href="https://nmap.org/download.html#windows" target="_blank" rel="external">Windows版本下载地址点我</a>  </p><h3 id="2-入门扫描"><a href="#2-入门扫描" class="headerlink" title="2.入门扫描"></a>2.入门扫描</h3><p>Windows 打开cmd窗口</p><p>linux  打开终端即可</p><p>在cmd窗口里面输入 <strong>nmap ip地址</strong></p><p>我们除了可以直接扫描IP，也可以扫描网站</p><p><img src="https://i.loli.net/2018/10/26/5bd31eca31b6a.png" alt="nmap baidu"></p><p><strong>nmap www.baidu.com</strong></p><p>这里我们用百度做示范，扫描了百度的开放端口，也是使用了<strong>nmap &lt;目标主机&gt;</strong>的扫描语句</p><h3 id="3-Nmap扫描多个IP-主机"><a href="#3-Nmap扫描多个IP-主机" class="headerlink" title="3.Nmap扫描多个IP/主机"></a>3.Nmap扫描多个IP/主机</h3><p><strong>nmap 192.168.1.1 192.168.1.2</strong></p><p><img src="https://i.loli.net/2018/10/26/5bd32474a6d51.png" alt="nmap 192 1 2"></p><p>如上，这里我们扫描了 192.168.1.1与192.168.1.2这两个IP</p><p>我们要将扫描的主机用空格隔开，比如<strong>nmap 192.168.1.1&lt;空格&gt;192.168.1.100</strong>，这样就可以扫描192.168.1.1和192.168.1.2两台主机的信息了</p><h3 id="4-扫描一个网段的主机信息"><a href="#4-扫描一个网段的主机信息" class="headerlink" title="4.扫描一个网段的主机信息"></a>4.扫描一个网段的主机信息</h3><p><strong>nmap 192.168.0/24</strong></p><p>我们只需要更改一下搜索的目标就可以扫描，这里扫描了192.168.1.0-255这一整个网段，利用的指令还是<strong>nmap 192.168.1.0/24</strong></p><p><img src="https://i.loli.net/2018/10/26/5bd3251aa4a91.png" alt="nmap 0/24"></p><p>这里需要注意的是，扫描一整个网段需要的时间较长，<strong>如果想要查看扫描进度可以在终端中按下Tab键便可以查看扫描进度</strong></p><h3 id="5-描某个范围内的存活主机"><a href="#5-描某个范围内的存活主机" class="headerlink" title="5.描某个范围内的存活主机"></a>5.描某个范围内的存活主机</h3><p><strong>nmap 192.168.1.1-100</strong></p><p><img src="https://i.loli.net/2018/10/26/5bd325a5aadcc.png" alt="nmap 1-100"></p><p>这里我们使用了nmap 192.168.1.1-100的指令，意思是扫描192.168.1.1到192.168.1.200这一IP段中存活的主机，我们只需要将搜索目标的IP增加范围即可</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>在我们的Nmap扫描教程第一节中，我们学习了如何扫描单个主机/多个主机/整个网段以及某个IP段的存活主机信息</strong></p><p><strong>但是Nmap中还有许多有趣的扫描方式，这里我们暂且不提，在下一节的教程中，我们将学习不同协议的扫描方式</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章介绍的是端口扫描工具nmap,用来扫描网上电脑开放的网络连接端。具体功能是确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统。它是网络管理员必用的软件之一，以及用以评估网络系统安全。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.picb.cc/uploads/2018/10/26/JbI86d.jpg&quot; alt=&quot;nmap&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透工具" scheme="https://junmo666.github.io/categories/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="nmap" scheme="https://junmo666.github.io/tags/nmap/"/>
    
      <category term="应用安装" scheme="https://junmo666.github.io/tags/%E5%BA%94%E7%94%A8%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
